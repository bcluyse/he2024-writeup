from Crypto.Util.number import long_to_bytes
from decimal import Decimal, getcontext

d = Decimal("108558249913654912965940302330463677659522327849752040249154983537931376711447753446078750459585068929061255563115321514107583357553375511879499468302459674778888941298684123550665943662956973368472434636899177211390575049269298954055740191242891907815891881074808494461835202709340654804790036874512758297194884778457538655665389842207203276000134877032836449478050322547852636564447336587949060158710830910425415789299719726199747636954120947724281386286626712561093374518507186661634721441026468041965091952487426455334066534862315923969845098027755755254715248428307745802890502029004449910036589111577136508145")
hint_1 = Decimal("17061347780794249474937241232210067248853992326832612618246691021883473946134655677687441412157857703606444858129229798729181511999941417079248816916398800254158380205975686822877683332947748593883879973137797066913439129505904185975901786363274357224292820647481353241115812182163209817605574692194107051614650879245007286513127155460653132782119052901592516408114681455884212579226838379050354351979274017290886704282949858854855220545880052711872903284127358620618442660935241175277762438290440049748381402411449900120675924310471041887374487007916064485523648828943063195915214058020064461558868092911435089696088")
hint_2 = Decimal("17061347780794249474937241232210067248853992326832612618246691021883473946134655677687441412157857703606444858129229798729181511999941417079248816916398800254158380205975686822877683332947748593883879973137797066913439129505904185975901786363274357224292820647481353241115812182163209817605574692194107051614682608366033433427655544056745556231593264049326018746703896654050234167841676926759637292807314933999966217282511228601089336295804775690349998659758021221369291834448080631738623473608907605109479463903233113943877434062712654852684276670025876108200973499112716384186485697596614301411957746226430962874694")
c = Decimal("14771953974869185325753989999306439169443459281017081802044481705032517760143246701952224108615433676555537192461592401710821963371007536567639647832688058381891594635660859018696254198047688405300791235710434996224199879812976316080274952979341960888489269818275411609645795086978322948402441951067219638588493452491788331610154636140788429371883451252588276364444451828866264706502965568460521644194954212456499395773412419744293595190319748377663678851564473399009986610885340941400903567168569899086596357735279151544561157005272580423383179382044165112576721925333630920881944840019797400553640581402786291466801")
e = Decimal("65537")

getcontext().prec = 10000
# We know 1 = ed mod phi
# This can be reduced to the following
# 1 = ed mod phi
# ed = 1 + k phi
# phi = (ed - 1) / k
# Where k is a positive integer

# We look for a phi which matches the h1/h2 conditions
# phi = (p-1)(q-1)
# phi = (pq - p - q + 1)
# phi = n - (n-h1) - (n-h2) + 1
# phi = n - n + h1 - n + h2 + 1
# phi = -n + h1 + h2 + 1
# n = h1 + h2 - phi + 1


def find_phi_candidate(k):
    phi_candidate = (e * d - 1) / k

    # Check is integer
    if int(phi_candidate) != phi_candidate:
        return

    n = hint_1 + hint_2 - phi_candidate + 1

    m_long = pow(c, d, n)
    m = str(long_to_bytes(int(m_long)))
    if "he2024" in m:
        print(m)


for i in range(1, 1000):
    find_phi_candidate(i)
